# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /register:
    post:
      operationId: register
      description: Register User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterReq'
      responses:
        200:
          description: Oke response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResOk"
        400:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      operationId: login
      description: Login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReq'
      responses:
        200:
          description: Oke response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResOk"
        400:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /profile:
    get:
      operationId: profile
      description: Profile User base on user token
      responses:
        '200':
          description: Profile Detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProfileResOk"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /hello:
    get:
      summary: This is just a test endpoint to get you started. Please delete this endpoint.
      operationId: hello
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Test return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    RegisterReq:
      description: User register payload
      type: object
      required:
        - phone
        - full_name
        - password
      properties:
        full_name:
          type: string
          description: The full name of the user
        phone:
          type: string
          description: The phone number of the user
        password:
          type: string
          description: The password of the user
    RegisterResOk:
      description: User register response OK
      type: object
      required:
        - success
        - id
      properties:
        success:
          type: boolean
        id:
          type: integer
    HelloResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: array
    LoginReq:
      description: User login payload
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
          description: The phone number of the user
        password:
          type: string
          description: The password of the user
    LoginResOk:
      description: User register response OK
      type: object
      required:
        - token
        - id
      properties:
        token:
          type: string
        id:
          type: integer
    GetProfileResOk:
      description: User profile response OK
      type: object
      required:
        - phone
        - name
      properties:
        phone:
          type: string
        name:
          type: string
